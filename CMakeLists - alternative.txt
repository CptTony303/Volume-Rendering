cmake_minimum_required(VERSION 3.20)
project(VolumeRenderer)

## Find dependencies
find_package(glfw3 REQUIRED)
find_package(glad REQUIRED)
find_package(glm REQUIRED)
#find_package(freetype REQUIRED)
find_package(imgui REQUIRED)

# stb does not have a CMake build, but is header-only
find_path(STB_INCLUDE_DIRS "stb_image.h") 

include_directories(include)

file(GLOB_RECURSE INCLUDE "include/*.h")

foreach(HEADER_FILE ${INCLUDE})
    # Erstelle einen relativen Pfad zum Header-Dateinamen
    file(RELATIVE_PATH HEADER_REL_PATH ${CMAKE_SOURCE_DIR} ${HEADER_FILE})

    # Erstelle ein Source Group basierend auf dem relativen Pfad
    get_filename_component(HEADER_GROUP "${HEADER_REL_PATH}" DIRECTORY)
    string(REPLACE "/" "\\" HEADER_GROUP "${HEADER_GROUP}")

    # Füge die Header-Datei zur entsprechenden Source Group hinzu
    source_group("${HEADER_GROUP}" FILES ${HEADER_FILE})
endforeach()


# Füge die Quellcode-Dateien hinzu
file(GLOB_RECURSE SRCS "src/*.cpp")

foreach(FILE ${SRCS})
    # Erstelle einen relativen Pfad zum Dateinamen
    file(RELATIVE_PATH REL_PATH ${CMAKE_SOURCE_DIR} ${FILE})

    # Erstelle ein Source Group basierend auf dem relativen Pfad
    get_filename_component(GROUP "${REL_PATH}" DIRECTORY)
    string(REPLACE "/" "\\" GROUP "${GROUP}")

    # Füge die Datei zur entsprechenden Source Group hinzu
    source_group("${GROUP}" FILES ${FILE})
endforeach()

## Create main executable
add_executable(main ${SRCS} ${INCLUDE})
target_include_directories(main
  PRIVATE 
    ${STB_INCLUDE_DIRS}
    "${CMAKE_CURRENT_LIST_DIR}/source"
)
target_link_libraries(
  main
  PRIVATE
    glfw
    glad::glad
    glm::glm
    imgui::imgui
)